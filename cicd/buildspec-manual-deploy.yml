######################################################################
#  Developer Portal Backend CodeBuild Manual Deploy
#  
#
# Tool Links:
#  - CodeBuild - https://docs.aws.amazon.com/codebuild/index.html
#  - CodeBuild Environmental Variables - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
#  - Runner for CodeBuild Enironment - https://github.com/department-of-veterans-affairs/lighthouse-codebuild-containers/tree/main/ecs-deployer
#  - AWS CLI 2.0 - https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html
#  - hub - https://github.com/github/hub 
#
# All Custom scripts are on the CodeBuild Environment container. 
# https://github.com/department-of-veterans-affairs/lighthouse-codebuild-containers/tree/main/
#
# Custom Scripts:
#  - slackpost.sh
#
######################################################################
version: 0.2
env:
  git-credential-helper: yes
  variables:
    # SERVICE_NAME should match the ECS service name without the project or environment
    # Example: ECS Service name: dvp-staging-saml-proxy = SERVICE_NAME: "saml-proxy"
    SERVICE_NAME: "dev-portal-be"
    # CI_JOB_NAME should match the Codebuild CI job's name
    CI_JOB_NAME: "dev-portal-backend-ci"
    # REPOSITORY should be the ECR Repository where the container is stored
    REPOSITORY: "dvp/developer-portal-backend"
    # FRIENDLY_NAME should be the name used in Parameter store, e.g.: /dvp/environment/friendly-name
    FRIENDLY_NAME: "developer-portal-backend"
    # Set DEPLOY_ENVS to match the environments you would like to deploy to when this buildspec is triggered. e.g.: "sandbox prod"
    DEPLOY_ENVS: "prod"
  parameter-store:
    GITHUB_TOKEN: "/dvp/devops/va_bot_github_token"
    SLACK_WEBHOOK: "/dvp/devops/codebuild_slack_webhook_lighthouse"
phases:
  pre_build:
    commands:
    - echo Logging into ECR
      - aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
    - slackpost.sh -started "Beginning a deploy for ${FRIENDLY_NAME} in envs - ${DEPLOY_ENVS}..."
    - echo Getting latest tag...
    # To get the latest release version, we will increment the last version number found in Github
    - |
      if [ -n "$DEPLOY_TAG" ]; then
        echo Found DEPLOY_TAG in job variables: "$DEPLOY_TAG".
      else
        DEPLOY_TAG=$(hub tag|sort --version-sort |tail -1); export DEPLOY_TAG
        echo Got latest tag from Github: "$DEPLOY_TAG"
      fi
    - slackpost.sh "Release version - ${DEPLOY_TAG} - will be deployed..."
  build:
    commands:
      # We trigger the deploys here. The list of environments to automatically deploy to is placed at the end of the command below, separated
      # by spaces, e.g.: deploy_to_ecs.sh <tag> <service> <friendly-name> [dev staging]
      - echo Triggering deploys...
      - |
        for ENV in $DEPLOY_ENVS; do
          SERVICE="dvp-${ENV}-${SERVICE_NAME}"
          CLUSTER="${ENV}_${SERVICE_NAME//-/_}_cluster"
          if ecs deploy --no-deregister \
            -t "$DEPLOY_TAG" \
            -e "${SERVICE}" CHAMBER_ENV "${ENV}" \
            -e "${SERVICE}" AWS_APP_NAME "${FRIENDLY_NAME}" \
            --timeout 1200 "${CLUSTER}" "${SERVICE}" \
            | tee "$CODEBUILD_SRC_DIR"/deploy_output.txt; then
            slackpost.sh -success "Deploy of version ${DEPLOY_TAG} of ${SERVICE_NAME} to ${ENV} complete."
          else
            PROJECT=$(echo "${CODEBUILD_BUILD_ID}"|awk -F":" '{print $1}')
            BUILD=$(echo "${CODEBUILD_BUILD_ID}"|awk -F":" '{print $2}')
            slackpost.sh -failure  "$(cat ${CODEBUILD_SRC_DIR}/deploy_output.txt)" "Deploy of version ${DEPLOY_TAG} of ${SERVICE_NAME} to ${ENV} failed."
          fi
        done
